{"version":3,"file":"index.js","sources":["../../utils.js","../core-toggle.js","../core-toggle.jsx"],"sourcesContent":["export const IS_BROWSER = typeof window !== 'undefined'\nexport const IS_ANDROID = IS_BROWSER && /(android)/i.test(navigator.userAgent) // Bad, but needed\nexport const IS_IOS = IS_BROWSER && /iPad|iPhone|iPod/.test(String(navigator.platform))\n\n/**\n* addEvent\n* @param {String} uuid An unique ID of the event to bind - ensurnes single instance\n* @param {String} type The type of event to bind\n* @param {Function} handler The function to call on event\n*/\nexport function addEvent (uuid, type, handler) {\n  const useCaptureForOldFirefox = type === 'blur' || type === 'focus'\n  const id = `${uuid}-${type}`\n\n  if (typeof window === 'undefined' || window[id]) return                       // Ensure single instance\n  document.addEventListener(window[id] = type, handler, useCaptureForOldFirefox)\n}\n\nexport function ariaExpand (master, open) {\n  const relatedTarget = ariaTarget(master)\n  const prevState = master.getAttribute('aria-expanded') === 'true'\n  const wantState = typeof open === 'boolean' ? open : (open === 'toggle' ? !prevState : prevState)\n  const canUpdate = prevState === wantState || dispatchEvent(master, 'toggle', {relatedTarget, isOpen: prevState})\n  const nextState = canUpdate ? wantState : prevState\n\n  relatedTarget[nextState ? 'removeAttribute' : 'setAttribute']('hidden', '')   // Toggle hidden attribute\n  master.setAttribute('aria-expanded', nextState)                               // Set expand always\n  return nextState\n}\n\nexport function ariaTarget (master, relationType) {\n  const targetId = master.getAttribute('aria-controls') || master.getAttribute('aria-owns')\n  const target = document.getElementById(targetId) || master.nextElementSibling\n  const label = IS_ANDROID ? 'data' : 'aria'   // Andriod has a bug and reads only label instead of content\n\n  if (!target) throw new Error(`missing nextElementSibling on ${master.outerHTML}`)\n  if (relationType) {\n    master.setAttribute(`aria-${relationType}`, target.id = target.id || getUUID())\n    target.setAttribute(`${label}-labelledby`, master.id = master.id || getUUID())\n  }\n  return target\n}\n\n/**\n* escapeHTML\n* @param {String} str A string with potential html tokens\n* @return {String} Escaped HTML string according to OWASP recommendation\n*/\nconst ESCAPE_MAP = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', '/': '&#x2F;', '\\'': '&#x27;'}\nexport function escapeHTML (str) {\n  return String(str || '').replace(/[&<>\"'/]/g, (char) => ESCAPE_MAP[char])\n}\n\n/**\n* exclude\n* @param {Object} target The target object\n* @param {Object} exclude The source to exclude keys from\n* @return {Object} The target object without keys found in source\n*/\nexport function exclude (target, exclude) {\n  return Object.keys(target).reduce((acc, key) => {\n    if (!exclude.hasOwnProperty(key)) acc[key] = target[key]\n    return acc\n  }, {})\n}\n\n/**\n* dispatchEvent\n* @param {Element} elem The target object\n* @param {String} name The source object(s)\n* @param {Object} detail Detail object (bubbles and cancelable is set to true)\n* @return {Boolean} Whether the event was cance\n*/\nexport function dispatchEvent (elem, name, detail = {}) {\n  let event\n  if (typeof window.CustomEvent === 'function') {\n    event = new window.CustomEvent(name, {bubbles: true, cancelable: true, detail})\n  } else {\n    event = document.createEvent('CustomEvent')\n    event.initCustomEvent(name, true, true, detail)\n  }\n\n  return elem.dispatchEvent(event)\n}\n\n/**\n* getUUID\n* @return {String} A generated unique ID\n*/\nexport function getUUID (el, attr) {\n  return Date.now().toString(36) + Math.random().toString(36).slice(2, 5)\n}\n\n/**\n* queryAll\n* @param {String|NodeList|Array|Element} elements A CSS selector string, nodeList, element array, or single element\n* @return {Array} Array of elements\n*/\nexport function queryAll (elements, context = document) {\n  if (elements.nodeType) return [elements]\n  if (typeof elements === 'string') return [].slice.call(context.querySelectorAll(elements))\n  if (elements.length) return [].slice.call(elements)\n  return []\n}\n","import {name, version} from './package.json'\nimport {addEvent, ariaExpand, ariaTarget, queryAll} from '../utils'\n\nconst UUID = `data-${name}-${version}`.replace(/\\W+/g, '-')         // Strip invalid attribute characters\nconst OPEN = 'aria-expanded'\nconst POPS = 'aria-haspopup'\n\nexport default function toggle (selector, open) {\n  const options = typeof open === 'object' ? open : {open}\n  const setOpen = typeof options.open === 'boolean'\n  const setPops = typeof options.popup === 'boolean'\n\n  return queryAll(selector).forEach((button) => {\n    const open = setOpen ? options.open : button.getAttribute(OPEN) === 'true'\n    const pops = setPops ? options.popup : button.getAttribute(POPS) === 'true'\n\n    button.setAttribute(UUID, '')\n    button.setAttribute(POPS, pops)\n\n    ariaTarget(button, 'controls')\n    ariaExpand(button, open)\n    return button\n  })\n}\n\naddEvent(UUID, 'click', ({target}) => {\n  queryAll(`[${UUID}]`).forEach((el) => {\n    const open = el.getAttribute(OPEN) === 'true'\n    const pops = el.getAttribute(POPS) === 'true'\n\n    if (el.contains(target)) toggle(el, !open)                  // Click on toggle\n    else if (pops) toggle(el, ariaTarget(el).contains(target))  // Click in target or outside\n  })\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport coreToggle from '../core-toggle/core-toggle'\nimport {exclude} from '../utils'\n\nconst DEFAULTS = {open: null, popup: null}\n\nfunction mountToggle (self) {\n  coreToggle(ReactDOM.findDOMNode(self).firstElementChild)      // Button must be first child\n}\n\nexport default class Toggle extends React.Component {\n  componentDidMount () { mountToggle(this) }                    // Mount client side only to avoid rerender\n  componentDidUpdate () { mountToggle(this) }                   // Must mount also on update in case content changes\n  render () {\n    return React.createElement('div', exclude(this.props, DEFAULTS),\n      React.Children.map(this.props.children, (child, adjacent) => {\n        return React.cloneElement(child, adjacent ?\n          {'hidden': !this.props.open} :\n          {\n            'aria-expanded': String(Boolean(this.props.open)),\n            'aria-haspopup': String(Boolean(this.props.popup))\n          })\n      })\n    )\n  }\n}\n"],"names":["IS_BROWSER","window","IS_ANDROID","test","navigator","userAgent","String","platform","ariaExpand","master","open","const","relatedTarget","ariaTarget","prevState","getAttribute","wantState","nextState","elem","name","detail","let","event","CustomEvent","bubbles","cancelable","document","createEvent","initCustomEvent","dispatchEvent","isOpen","setAttribute","relationType","targetId","target","getElementById","nextElementSibling","label","Error","id","getUUID","el","attr","Date","now","toString","Math","random","slice","queryAll","elements","context","nodeType","call","querySelectorAll","length","type","handler","useCaptureForOldFirefox","UUID","replace","OPEN","POPS","toggle","selector","options","setOpen","setPops","popup","forEach","button","pops","ref","contains","addEventListener","DEFAULTS","mountToggle","self","coreToggle","ReactDOM","findDOMNode","firstElementChild","componentDidMount","this","componentDidUpdate","render","React","createElement","exclude","Object","keys","reduce","acc","key","hasOwnProperty","props","Children","map","children","child","adjacent","cloneElement","hidden","aria-expanded","Boolean","aria-haspopup","Component"],"mappings":"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"}