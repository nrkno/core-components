{"version":3,"file":"core-datepicker.min.js","sources":["../utils.js","core-datepicker.js"],"sourcesContent":["export const IS_BROWSER = typeof window !== 'undefined'\nexport const IS_ANDROID = IS_BROWSER && /(android)/i.test(navigator.userAgent) // Bad, but needed\nexport const IS_IOS = IS_BROWSER && /iPad|iPhone|iPod/.test(String(navigator.platform))\n\n/**\n* addEvent\n* @param {String} uuid An unique ID of the event to bind - ensurnes single instance\n* @param {String} type The type of event to bind\n* @param {Function} handler The function to call on event\n*/\nexport function addEvent (uuid, type, handler) {\n  const useCaptureForOldFirefox = type === 'blur' || type === 'focus'\n  const id = `${uuid}-${type}`\n\n  if (typeof window === 'undefined' || window[id]) return                       // Ensure single instance\n  document.addEventListener(window[id] = type, handler, useCaptureForOldFirefox)\n}\n\nexport function ariaExpand (master, open) {\n  const relatedTarget = ariaTarget(master)\n  const prevState = master.getAttribute('aria-expanded') === 'true'\n  const wantState = typeof open === 'boolean' ? open : (open === 'toggle' ? !prevState : prevState)\n  const canUpdate = prevState === wantState || dispatchEvent(master, 'toggle', {relatedTarget, isOpen: prevState})\n  const nextState = canUpdate ? wantState : prevState\n\n  relatedTarget[nextState ? 'removeAttribute' : 'setAttribute']('hidden', '')   // Toggle hidden attribute\n  master.setAttribute('aria-expanded', nextState)                               // Set expand always\n  return nextState\n}\n\nexport function ariaTarget (master, relationType) {\n  const targetId = master.getAttribute('aria-controls') || master.getAttribute('aria-owns')\n  const target = document.getElementById(targetId) || master.nextElementSibling\n  const label = IS_ANDROID ? 'data' : 'aria'   // Andriod has a bug and reads only label instead of content\n\n  if (!target) throw new Error(`missing nextElementSibling on ${master.outerHTML}`)\n  if (relationType) {\n    master.setAttribute(`aria-${relationType}`, target.id = target.id || getUUID())\n    target.setAttribute(`${label}-labelledby`, master.id = master.id || getUUID())\n  }\n  return target\n}\n\n/**\n* escapeHTML\n* @param {String} str A string with potential html tokens\n* @return {String} Escaped HTML string according to OWASP recommendation\n*/\nconst ESCAPE_MAP = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', '/': '&#x2F;', '\\'': '&#x27;'}\nexport function escapeHTML (str) {\n  return String(str || '').replace(/[&<>\"'/]/g, (char) => ESCAPE_MAP[char])\n}\n\n/**\n* exclude\n* @param {Object} target The target object\n* @param {Object} exclude The source to exclude keys from\n* @return {Object} The target object without keys found in source\n*/\nexport function exclude (target, exclude) {\n  return Object.keys(target).reduce((acc, key) => {\n    if (!exclude.hasOwnProperty(key)) acc[key] = target[key]\n    return acc\n  }, {})\n}\n\n/**\n* dispatchEvent\n* @param {Element} elem The target object\n* @param {String} name The source object(s)\n* @param {Object} detail Detail object (bubbles and cancelable is set to true)\n* @return {Boolean} Whether the event was cance\n*/\nexport function dispatchEvent (elem, name, detail = {}) {\n  let event\n  if (typeof window.CustomEvent === 'function') {\n    event = new window.CustomEvent(name, {bubbles: true, cancelable: true, detail})\n  } else {\n    event = document.createEvent('CustomEvent')\n    event.initCustomEvent(name, true, true, detail)\n  }\n\n  return elem.dispatchEvent(event)\n}\n\n/**\n* getUUID\n* @return {String} A generated unique ID\n*/\nexport function getUUID (el, attr) {\n  return Date.now().toString(36) + Math.random().toString(36).slice(2, 5)\n}\n\n/**\n* queryAll\n* @param {String|NodeList|Array|Element} elements A CSS selector string, nodeList, element array, or single element\n* @return {Array} Array of elements\n*/\nexport function queryAll (elements, context = document) {\n  if (elements.nodeType) return [elements]\n  if (typeof elements === 'string') return [].slice.call(context.querySelectorAll(elements))\n  if (elements.length) return [].slice.call(elements)\n  return []\n}\n","// import {name, version} from './package.json'\nimport {queryAll, addEvent} from '../utils'\n\nconst KEY = 'core-datepicker' //`${name}-${version}`                    // Unique id of component\n\nexport default function datepicker (...args) {              // Expose component\n  return new Datepicker(...args)\n}\n\nclass Datepicker {\n  constructor (elements) {\n    this.elements = queryAll(elements, KEY)\n    // tabindex=\"0\" på datepicker kun lytte til events på disse\n  }\n  open (open = true) {}\n  close (open = false) {}\n}\n\n\n/* <table>\n  <caption></caption>\n  <thead></thead>\n  <tbody></tbody>\n  <tfoot></tfoot>\n</table> */\n"],"names":["const","IS_BROWSER","window","test","navigator","userAgent","String","platform","Datepicker","elements","this","context","document","nodeType","slice","call","querySelectorAll","length","queryAll","open","close","args"],"mappings":"0LAAOA,IAAMC,EAA+B,oBAAXC,OACPD,GAAc,aAAaE,KAAKC,UAAUC,WAC9CJ,GAAc,mBAAmBE,KAAKG,OAAOF,UAAUG,WCO7E,IAAMC,EACJ,SAAaC,GACbC,KAAOD,SDuFT,SAA0BA,EAAUE,GAClC,sBAD4CC,UACxCH,EAASI,UAAkBJ,GACP,iBAAbA,KAAiCK,MAAMC,KAAKJ,EAAQK,iBAAiBP,IAC5EA,EAASQ,UAAkBH,MAAMC,KAAKN,MC1FxBS,CAAST,EARjB,2BAWZD,YAAEW,cAAMA,mBAAO,IACfX,YAAEY,eAAOD,mBAAO,IAVhB,kEACE,OAAO,kCAAIX,gBAAca"}